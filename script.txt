solution project1
{
	name: 'Project 1';
	desc: 'Description of Project 1';
	tag: 'tag1';
}

solution project222
{
	name: 'Project 222';
	desc: 'Description of Project 222';
	tag: 'tag222';
}

branch analytical
{
	solution: project1;
	name: '';
	desc: '';
}

branch operational
{
	solution: project1;
	name: '';
	desc: '';
}

branch topology
{
	solution: project1;
	name: '';
	desc: '';
	tag: 'tag2';
	tag: 'tag3';
}

environment dev
{
	solution: project1;
	name: 'DEV Environment';
	desc: '';
	tag: 'env_tag5';
	tag: 'env_tag10';
}

environment qa
{
	solution: project1;
	name: '';
	desc: '';
}

environment prod
{
	solution: project1;
	name: '';
	desc: '';
}

server nexus
{
	solution: project1; // DEFAULT DATABASE SOLUTION
	environment: dev; // DEFAULT DATABASE ENVIRONMENT
	branch: operational; // DEFAULT BRANCH FOR ALL DATABASES HOSTED BY THIS SERVER.
	host: 'nexus.sqlcurrent.com'; // SHARED SERVER ADDRESS FOR DATABASES.  USED BY THE CONNECTION STRING.
	tag: 'location_us'; // DEFAULT TAG FOR DATABASES
	tag: 'location_de';
	tag: 'location_newcastle';
	tag: 'location_engineering';
	tag: 'location_my_desk';
}

server proxima
{
	solution: project1;
	environment: qa;
	host: 'proxima.sqlcurrent.com';
	tag: 'location_us';
	tag: 'location_de';
	tag: 'location_newcastle';
	tag: 'location_engineering';
	tag: 'location_rdlab';
}

database nexus_opdb
{
	name: 'Nexus Operational Database';
	solution: project1;
	branch: operational;
	driver: 'psycopg2';
	server: nexus;
	connString: 'dbname=binningtool user=postgres password=postgres';
	environment: dev;
	tag: 'location_us';
	tag: 'location_de';
	tag: 'location_newcastle';
	tag: 'location_engineering';
	tag: 'location_my_desk';
	create: 'create.sql';
	version: 1.0.0;
}

database nexus_analyticaldb
{
	name: 'Nexus Analytical Database';
	solution: project222;
	driver: 'influx';
	server: nexus;
	connString: 'Server=${nexus.host};database=embedded';
	environment: dev;
	branch: analytical;
	tag: 'location_us';
	tag: 'location_de';
	tag: 'location_newcastle';
	tag: 'location_engineering';
	tag: 'location_my_desk';
}

database proxima_opdb
{
	driver: 'psycopg2';
	connString: 'dbname=binningtool user=postgres password=postgres';
	create: 'create.sql';
	name: 'b';
	solution: project1;
	server: proxima;
	environment: dev;
	branch: operational;
	tag: 'location_us';
	tag: 'location_de';
	tag: 'location_newcastle';
	tag: 'location_engineering';
	tag: 'location_rdlab';
}

database proxima_analyticaldb
{
	name: 'a';
	solution: project1;
	driver: 'influx';
	server: proxima;
	connString: 'Server=${proxima.host};database=embedded';
	environment: dev;
	branch: analytical;
	tag: 'location_us';
	tag: 'location_de';
	tag: 'location_newcastle';
	tag: 'location_engineering';
	tag: 'location_rdlab';
}

version 1.0.1 for branch operational
{
	name: 'brilliant_dog';
	dir: './branches/operational/version_1.0.1';
	precheck: 'check1.sql';
	precheck: 'check2.sql';
	apply: 'apply1.sql';
	apply: 'apply2.sql';
	revert: 'revert.sql';
	check: 'check3.sql';
	check: 'check4.sql';
}

version 1.0.1 for branch analytical
{
	name: 'brilliant_dog';
	dir: './branches/analytical/version_1.0.1';
	precheck: 'check1.txt';
	precheck: 'check2.txt';
	apply: 'apply.txt';
	revert: 'revert.txt';
	check: 'check3.txt';
	check: 'check4.txt';
}

/*
create databases;
create database nexus_opdb;
create nexus_opdb;
create databases where id = nexus_opdb;
create databases order by id asc;
create databases where id = nexus_opdb order by id asc;
create databases order by id asc;
create databases order by name asc;
create databases where id != nexus_opdb;
create databases where id in (nexus_analyticaldb, proxima_analyticaldb);
create databases where name in ('a', 'c');
create databases where id in (nexus_analyticaldb, proxima_analyticaldb) order by id asc;
create databases where id not in (nexus_opdb, nexus_analyticaldb);
create databases where id not in (nexus_opdb, nexus_analyticaldb) order by name descending;
create databases where id not in (nexus_opdb, nexus_analyticaldb) order by name asc;
create databases where name = 'e';
create databases where name != 'e';
create databases where name like 'Nexus%';
create databases where name like 'Nexus%' order by id;
create databases where name like 'Nexus%' order by id descending;
create databases where name like 'Nexus%' order by id asc;
create databases where name not like 'Nexus%';
create databases where name matches '^Nexus.*$';
create databases where name not matches '^Nexus.*$';
create databases where name in ('Nexus Operational Database');
create databases where name not in ('Nexus Operational Database');
create databases where solution = project1;
create databases where solution = project222;
create databases where solution != project1;
create databases where solution != project222;
create databases where solution in (project1);
create databases where solution in (project1, project222);
create databases where solution in (project222);
create databases where solution not in (project1);
create databases where solution not in (project222);
create databases where solution not in (project1, project222);
create databases where branch = operational;
create databases where branch != operational;
create databases where branch in (operational);
create databases where branch in (operational, analytical);
create databases where branch not in (operational);
create databases where branch not in (operational, analytical);
create databases where environment = dev;
create databases where environment = qa;
create databases where environment != dev;
create databases where environment != qa;
create databases where environment in (dev, qa);
create databases where environment not in (dev);
create databases where environment not in (qa);
create databases where environment not in (dev, qa);
create databases where server = nexus;
create databases where server != nexus;
create databases where server in (nexus);
create databases where server in (nexus, proxima);
create databases where server not in (nexus);
create databases where server not in (nexus, proxima);
create databases where name not in ('Nexus Operational Database') order by name asc;
create databases order by id asc;
create databases order by id descending;
create databases order by name asc;
create databases order by name descending;
create databases where any tag = 'location_us';
create databases where any tag = 'location_my_desk';
create databases where every tag = 'location_us';
create databases where any tag != 'location_us';
create databases where every tag != 'location_us';
create databases where every tag != 'idiot_village';
create databases where any tag like 'location_my_%';
create databases where any tag like 'location_rdlab%';
create databases where every tag like 'location%';

update nexus_opdb;
create nexus_opdb;
update database nexus_opdb to version 1.0.0;
update database nexus_opdb to version 1.0.1;
create databases where id = proxima_opdb;
create databases where id in (nexus_opdb, proxima_opdb);
*/

//
// NEXT THING TO IMPLEMENT AND TEST:
//
update databases to version 1.0.0 where id in (nexus_opdb, proxima_opdb);






/*

create databases where any tag not like 'location_us';
create databases where every tag not like 'location_us';

create databases where any tag matches 'location_us';
create databases where every tag matches 'location_us';

create databases where any tag not matches 'location_us';
create databases where every tag not matches 'location_us';

create databases where any tag in ('location_us');
create databases where every tag in ('location_us');

create databases where any tag not in ('location_us');
create databases where every tag not in ('location_us', 'location_my_desk');
*/
//
// OTHER IDEAS:
// 
// FOR SAFETY, ADD HOME DIRECTORY FOR ALL DATA, MAKE THIS A GLOBAL VARIABLE IN THE SCRIPT.
// ADD CONCURRENCY OPTION FOR PERFORMING UPDATES, CREATES, CHECKS, ETC.
// ADD ALGORITHM FOR CUT-ACROSS AND DEEP UPDATING.
// ADD OPTIONS FOR ERROR HANDLING.
// ADD OPTIONS FOR WHERE UPDATES CAN BE STORED.
// INTRODUCE sqlcurrent-env.json CONFIGURATION FILE.
// IMPLEMENT CHECKS DURING THE UPDATES, ALSO PERMIT CONFIGURATION TO SKIP OR FORCE PRECHECKS & CHECKS.
// WHEN CREATING MULTIPLE DATABASES, DO WE STOP ON ANY ERROR?
// WHEN CREATING A DATABASE, DO WE ALLOW A RECREATE TO HAPPEN?
// WHEN UPDATING MULTIPLE DATABASES, DO WE STOP ON ANY ERROR?
// VALIDATE THE DATABASES BEFORE CREATE?
//
