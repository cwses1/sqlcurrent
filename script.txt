solution iot_app
{
	name: 'IoT Application';
}

solution cloud_app
{
	name: 'Cloud Application';
}

environment dev
{
	name: 'Development Environment';
	solution: cloud_app;
	solution: iot_app;
}

environment qa
{
	name: 'Quality Assurance Environment';
	solution: cloud_app;
	solution: iot_app;
}

environment uat
{
	name: 'User Acceptance Testing Environment';
	solution: cloud_app;
}

environment perf
{
	name: 'Performance Testing Environment';
	solution: iot_app;
}

environment prod
{
	name: 'Production Environment';
	solution: cloud_app;
	solution: iot_app;
}

branch operational
{
	name: 'Operational Database';
	solution: iot_app;
	create: 'create.sql';
	//create: 'create2.sql';
	//reset: 'reset1.sql';
	//reset: 'reset2.sql';
	version: 1.0.0;
}

branch analytical
{
	name: 'Time Series Database';
	solution: iot_app;
}

branch topology
{
	solution: cloud_app;
}

branch customer
{
	solution: cloud_app;
}

server nexus
{
	branch: operational; // FOR SERVERS DEDICATED TO A BRANCH.  A DATABASE ASSIGNED TO THIS SERVER WILL DEFAULT TO THIS BRANCH.
	environment: dev; // FOR SERVERS DEDICATED TO AN ENVIRONMENT.  A DATABASE ASSIGNED TO THIS SERVER WILL DEFAULT TO THIS ENVIRONMENT.
	host: 'nexus.sqlcurrent.com';
	solution: iot_app; // FOR SERVERS DEDICATED TO A SOLUTION.  A DATABASE ASSIGNED TO THIS SERVER WILL DEFAULT TO THIS SOLUTION.
	tag: 'location_us_de_newcastle_engineering_corydesk';
}

server proxima
{
	environment: qa;
	host: 'proxima.sqlcurrent.com';
	solution: iot_app;
	tag: 'location_us_de_newcastle_engineering_rdlab';
}

database nexus_opdb
{
	branch: operational;
	connString: 'postgresql://postgres:postgres@127.0.0.1/binningtool';
	driver: 'psycopg2';
	environment: dev;
	name: 'Nexus Instrument Operational Database';
	server: nexus;
	solution: iot_app;
	tag: 'location_us_de_newcastle_engineering_corydesk';
}

database nexus_analyticaldb
{
	branch: analytical;
	connString: 'server={{nexus}} database=embedded';
	driver: 'influx';
	environment: dev;
	name: 'Nexus Analytical Database';
	server: nexus;
	solution: iot_app;
	tag: 'location_us_de_newcastle_engineering_corydesk';
}

database proxima_opdb
{
	branch: operational;
	connString: 'server={{proxima}} dbname=binningtool user=postgres password=postgres';
	create: 'create.sql';
	driver: 'psycopg2';
	environment: dev;
	name: 'b';
	server: proxima;
	solution: iot_app;
	tag: 'location_us_de_newcastle_engineering_rdlab';
}

database proxima_analyticaldb
{
	branch: analytical;
	connString: 'server={{proxima}} dbname=binningtool user=postgres password=postgres';
	driver: 'influx';
	environment: dev;
	name: 'a';
	server: proxima;
	solution: iot_app;
	tag: 'location_us_de_newcastle_engineering_rdlab';
}

version 1.1.0 for branch operational
{
	name: 'brilliant_dog'; // OPTIONAL
	dir: 'version_1.1.0'; // BASE DIRECTORY FOR THIS VERSION, INFER IF EXCLUDED, ./sqlcurrent_sqlscripts/branchName/version_1.0.1
	apply: 'schema.sql';
	apply: 'data.sql';
	precheck: 'precheck1.sql';
	precheck: 'precheck2.sql';
	check: 'check1.sql';
	check: 'check2.sql';
	revert: 'revert.sql';
}

version 1.2.0 for branch operational
{
	name: 'brilliant_dog'; // OPTIONAL
	dir: 'version_1.2.0'; // BASE DIRECTORY FOR THIS VERSION, INFER IF EXCLUDED, ./sqlcurrent_sqlscripts/branchName/version_1.0.1
	precheck: 'check1.sql';
	precheck: 'check2.sql';
	apply: 'schema.sql';
	apply: 'data.sql';
	revert: 'revert.sql';
	check: 'check3.sql';
	check: 'check4.sql';
}

version 1.0.1 for branch analytical
{
	name: 'brilliant_dog';
	dir: './branches/analytical/version_1.0.1';
	precheck: 'check1.txt';
	precheck: 'check2.txt';
	apply: 'apply.txt';
	revert: 'revert.txt';
	check: 'check3.txt';
	check: 'check4.txt';
}

/*
create databases;
create database nexus_opdb;
create nexus_opdb;
create databases where id = nexus_opdb;
create databases order by id asc;
create databases where id = nexus_opdb order by id asc;
create databases order by id asc;
create databases order by name asc;
create databases where id != nexus_opdb;
create databases where id in (nexus_analyticaldb, proxima_analyticaldb);
create databases where name in ('a', 'c');
create databases where id in (nexus_analyticaldb, proxima_analyticaldb) order by id asc;
create databases where id not in (nexus_opdb, nexus_analyticaldb);
create databases where id not in (nexus_opdb, nexus_analyticaldb) order by name descending;
create databases where id not in (nexus_opdb, nexus_analyticaldb) order by name asc;
create databases where name = 'e';
create databases where name != 'e';
create databases where name like 'Nexus%';
create databases where name like 'Nexus%' order by id;
create databases where name like 'Nexus%' order by id descending;
create databases where name like 'Nexus%' order by id asc;
create databases where name not like 'Nexus%';
create databases where name matches '^Nexus.*$';
create databases where name not matches '^Nexus.*$';
create databases where name in ('Nexus Operational Database');
create databases where name not in ('Nexus Operational Database');
create databases where solution = project1;
create databases where solution = project222;
create databases where solution != project1;
create databases where solution != project222;
create databases where solution in (project1);
create databases where solution in (project1, project222);
create databases where solution in (project222);
create databases where solution not in (project1);
create databases where solution not in (project222);
create databases where solution not in (project1, project222);
create databases where branch = operational;
create databases where branch != operational;
create databases where branch in (operational);
create databases where branch in (operational, analytical);
create databases where branch not in (operational);
create databases where branch not in (operational, analytical);
create databases where environment = dev;
create databases where environment = qa;
create databases where environment != dev;
create databases where environment != qa;
create databases where environment in (dev, qa);
create databases where environment not in (dev);
create databases where environment not in (qa);
create databases where environment not in (dev, qa);
create databases where server = nexus;
create databases where server != nexus;
create databases where server in (nexus);
create databases where server in (nexus, proxima);
create databases where server not in (nexus);
create databases where server not in (nexus, proxima);
create databases where name not in ('Nexus Operational Database') order by name asc;
create databases order by id asc;
create databases order by id descending;
create databases order by name asc;
create databases order by name descending;
create databases where any tag = 'location_us';
create databases where any tag = 'location_my_desk';
create databases where every tag = 'location_us';
create databases where any tag != 'location_us';
create databases where every tag != 'location_us';
create databases where every tag != 'idiot_village';
create databases where any tag like 'location_my_%';
create databases where any tag like 'location_rdlab%';
create databases where every tag like 'location%';
update nexus_opdb;
create nexus_opdb;
update database nexus_opdb to version 1.0.0;
update database nexus_opdb to version 1.0.1;
create databases where id = proxima_opdb;
create databases where id in (nexus_opdb, proxima_opdb);
create databases;
create nexus_opdb;
update nexus_opdb;
update database nexus_opdb to version 1.0.0;
update databases to version 1.0.0 where id in (nexus_opdb, proxima_opdb);
update databases to version 1.0.0 where solution = iot_app;
select databases where solution = iot_app;
update nexus_opdb to version 1.1.0;
select databases;
update nexus_opdb to version 1.1.0;
update nexus_opdb to version 1.2.0;
update nexus_opdb to version 1.2.0;
revert nexus_opdb to version 1.0.0;
update nexus_opdb to version 1.1.0;
update databases to version 1.2.0;
revert databases to version 1.0.0;
*/

//
// NEXT THING TO IMPLEMENT AND TEST:
//
configuration config1 for branch operational
{
	name: 'QA Users';
	desc: 'Flashes the database with specific users.';
	environment: dev;
	version: 1.0.0;
	dir: './sqlcurrent_sqlscripts/operational/_configurations';
	apply: 'config1.sql';
	apply: 'config2.sql';
	precheck: '';
	precheck: '';
	check: '';
	check: '';
	revert: '';
	revert: '';
}

apply configuration config1 to database nexus_opdb;

/*
apply configuration config1 to databases where id = nexus_opdb;

check nexus_opdb;
check nexus_opdb to version 1.0.0;
create and update nexus_opdb to version 1.1.0;
create databases where any tag not like 'location_us';
create databases where every tag not like 'location_us';
create databases where any tag matches 'location_us';
create databases where every tag matches 'location_us';
create databases where any tag not matches 'location_us';
create databases where every tag not matches 'location_us';
create databases where any tag in ('location_us');
create databases where every tag in ('location_us');
create databases where any tag not in ('location_us');
create databases where every tag not in ('location_us', 'location_my_desk');
*/
//
// OTHER IDEAS:
// 
// FOR SAFETY, ADD HOME DIRECTORY FOR ALL DATA, MAKE THIS A GLOBAL VARIABLE IN THE SCRIPT.
// ADD CONCURRENCY OPTION FOR PERFORMING UPDATES, CREATES, CHECKS, ETC.
// ADD ALGORITHM FOR CUT-ACROSS AND DEEP UPDATING.
// ADD OPTIONS FOR ERROR HANDLING.
// ADD OPTIONS FOR WHERE UPDATES CAN BE STORED.
// INTRODUCE sqlcurrent-env.json CONFIGURATION FILE WITH GLOBAL SYMBOLS TO INSERT.
// IMPLEMENT CHECKS DURING THE UPDATES, ALSO PERMIT CONFIGURATION TO SKIP OR FORCE PRECHECKS & CHECKS.
// WHEN CREATING MULTIPLE DATABASES, DO WE STOP ON ANY ERROR?
// WHEN CREATING A DATABASE, DO WE ALLOW A RECREATE TO HAPPEN?
// WHEN UPDATING MULTIPLE DATABASES, DO WE STOP ON ANY ERROR?
// VALIDATE THE DATABASES BEFORE CREATE? validate databases STATEMENT?
// ENVIRONMENT NAMES CONFLICT ACOSS SOLUTIONS (ALL APPS HAVE A DEV, QA, PROD).  PERMIT MULTIPLE SOLUTIONS FOR EACH ENVIRONMENT.
// HOW DO WE AUTO REVERT IF AN UPDATE FAILS?
// IF A VERSION FAILED IN THE END, BUT OTHER SCRIPTS IN THE SAME VERSION WERE SUCCESSFUL, THEN WE TREAT THE UPDATE AS SUCCESSFUL INCORRECTLY.
// IMPORT OTHER SCRIPT FILES INTO A SINGLE SCRIPT.
// PRINT STATEMENTS LIKE '4 APPLY SCRIPTS TO RUN.' AND 'RUNNING APPLY SCRIPT 1 OF 4: 'FILE NAME''.
// DEBUGGING STATEMENTS, VERBOSITY SETTINGS.
// INTRODUCE @import FOR STRUCTURING SCRIPTS BETTER.
// COMPONENTIZE THE PARSING SYSTEM SO OTHER PROGRAMS CAN EMBED THIS INTO THEM.
// FOR EACH STATEMENT, ADD A "FORCE" OPTION TO IGNORE ERRORS AND KEEP GOING.
// ADD A SCRIPT PROPERTY TYPE SUCH AS check, precheck, apply, revert TO THE UPDATE TRACKING FILE SO WE KNOW WHAT THE USER AND SCRIPT WAS TRYING TO DO.
// PRINT EACH STATEMENT BEFORE RUNNING OPTION.
//
