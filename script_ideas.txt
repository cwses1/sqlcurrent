//
// OTHER IDEAS:
// 
// FOR SAFETY, ADD HOME DIRECTORY FOR ALL DATA, MAKE THIS A GLOBAL VARIABLE IN THE SCRIPT.
// ADD CONCURRENCY OPTION FOR PERFORMING UPDATES, CREATES, CHECKS, ETC.
// ADD ALGORITHM FOR CUT-ACROSS AND DEEP UPDATING.
// ADD OPTIONS FOR ERROR HANDLING.
// ADD OPTIONS FOR WHERE UPDATES CAN BE STORED.
// INTRODUCE sqlcurrent-env.json CONFIGURATION FILE WITH GLOBAL SYMBOLS TO INSERT.
// IMPLEMENT CHECKS DURING THE UPDATES, ALSO PERMIT CONFIGURATION TO SKIP OR FORCE PRECHECKS & CHECKS.
// WHEN CREATING MULTIPLE DATABASES, DO WE STOP ON ANY ERROR?
// WHEN CREATING A DATABASE, DO WE ALLOW A RECREATE TO HAPPEN?
// WHEN UPDATING MULTIPLE DATABASES, DO WE STOP ON ANY ERROR?
// VALIDATE THE DATABASES BEFORE CREATE? validate databases STATEMENT?
// ENVIRONMENT NAMES CONFLICT ACOSS SOLUTIONS (ALL APPS HAVE A DEV, QA, PROD).  PERMIT MULTIPLE SOLUTIONS FOR EACH ENVIRONMENT.
// HOW DO WE AUTO REVERT IF AN UPDATE FAILS?
// IF A VERSION FAILED IN THE END, BUT OTHER SCRIPTS IN THE SAME VERSION WERE SUCCESSFUL, THEN WE TREAT THE UPDATE AS SUCCESSFUL INCORRECTLY.
// IMPORT OTHER SCRIPT FILES INTO A SINGLE SCRIPT.
// PRINT STATEMENTS LIKE '4 APPLY SCRIPTS TO RUN.' AND 'RUNNING APPLY SCRIPT 1 OF 4: 'FILE NAME''.
// DEBUGGING STATEMENTS, VERBOSITY SETTINGS.
// INTRODUCE @import FOR STRUCTURING SCRIPTS BETTER.
// COMPONENTIZE THE PARSING SYSTEM SO OTHER PROGRAMS CAN EMBED THIS INTO THEM.
// FOR EACH STATEMENT, ADD A "FORCE" OPTION TO IGNORE ERRORS AND KEEP GOING.
// ADD A SCRIPT PROPERTY TYPE SUCH AS check, precheck, apply, revert TO THE UPDATE TRACKING FILE SO WE KNOW WHAT THE USER AND SCRIPT WAS TRYING TO DO.
// PRINT EACH STATEMENT BEFORE RUNNING OPTION.
// ADD CHECK SCRIPTS FOR DATABASE CREATE.
// ADD CHECK SCRIPTS FOR BRANCH CREATE.
// ADD DETAILS TO CHECK SCRIPTS ACROSS VERSIONS, COUNT VERSIONS, MAKE MESSAGES MORE EXPLICIT.
//

